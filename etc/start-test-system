#!/bin/bash
set -eou pipefail

################################################################################
# 
# Starts a clean Rooset system for testing. 
# All data will be lost on exit
#
################################################################################

SCRIPTDIR=`dirname "$(readlink -f "$0")"`
cd $SCRIPTDIR

EVENTSTORE_LOG_FILE="/tmp/rooset-testing-eventstore.log"
EVENTSTORE_READY_LINE="Sub System 'Projections' initialized"
ELASTICSEARCH_LOG_FILE="/tmp/rooset-testins-elasticsearch.log"
ELASTICSEARCH_READY_LINE="Node.*started"

# Kill all processes on exit
killAllJobs () {
  echo "killing processes: $(jobs -p)"
  kill $(jobs -p)
  exit 0
}
trap killAllJobs EXIT

waitForLogToHaveLine () {
  log_file=$1
  ready_line=$2
  echo "waiting for \"${ready_line}\" in ${log_file}"
  ( tail --pid=$$ -f ${log_file} & ) | grep -E -q "${ready_line}"
}


# Start eventstore with in-memory database
echo "starting eventstore"
eventstored --mem-db --run-projections=all 2>&1 > ${EVENTSTORE_LOG_FILE} &
echo "eventstore started with pid: ${!}"
waitForLogToHaveLine ${EVENTSTORE_LOG_FILE} "${EVENTSTORE_READY_LINE}"
echo "eventstore ready"


# Start elasticsearch with a fresh database
echo "starting elasticsearch"
${SCRIPTDIR}/start-test-elasticsearch 2>&1 > ${ELASTICSEARCH_LOG_FILE} &
echo "elasticsearch started with pid: ${!}"
waitForLogToHaveLine "${ELASTICSEARCH_LOG_FILE}" "${ELASTICSEARCH_READY_LINE}"
echo "elasticsearch ready"


# Keep script alive
while true; do sleep 5; done

